openapi: 3.0.0
info:
  title: Telegram Bot API
  description: API for interacting with the Telegram bot
  version: 1.0.0

servers:
  - url: https://api.example.com

paths:
  /users:
    get:
      summary: Get a list of all users
      description: Returns a list of all users registered in the system
      security:
        - bearerAuth: []
      responses:
        200:
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

    post:
      summary: Create a new user
      description: Creates a new user in the system
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        201:
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /users/{userId}:
    get:
      summary: Get a user by ID
      description: Returns a user by ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
      responses:
        200:
          description: User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

    put:
      summary: Update a user
      description: Updates a user in the system
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /subscriptions:
    get:
      summary: Get a list of all subscriptions
      description: Returns a list of all subscriptions in the system
      security:
        - bearerAuth: []
      responses:
        200:
          description: List of subscriptions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Subscription'

    post:
      summary: Create a new subscription
      description: Creates a new subscription in the system
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subscription'
      responses:
        201:
          description: Subscription created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'

  /subscriptions/{subscriptionId}:
    get:
      summary: Get a subscription by ID
      description: Returns a subscription by ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: subscriptionId
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Subscription
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'

    put:
      summary: Update a subscription
      description: Updates a subscription in the system
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: subscriptionId
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subscription'
      responses:
        200:
          description: Subscription updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'

  /transactions:
    get:
      summary: Get a list of all transactions
      description: Returns a list of all transactions in the system
      security:
        - bearerAuth: []
      responses:
        200:
          description: List of transactions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'

    post:
      summary: Create a new transaction
      description: Creates a new transaction in the system
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transaction'
      responses:
        201:
          description: Transaction created
          content:
  /transactions:
    get:
      summary: Get a list of all transactions
      description: Returns a list of all transactions in the system
      security:
        - bearerAuth: []
      responses:
        200:
          description: List of transactions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'

    post:
      summary: Create a new transaction
      description: Creates a new transaction in the system
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transaction'
      responses:
        201:
          description: Transaction created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the user
        name:
          type: string
          description: Name of the user
        email:
          type: string
          description: Email address of the user
        role:
          type: string
          description: Role of the user (administrator, user, manager)

    Subscription:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the subscription
        userId:
          type: integer
          description: Foreign key referencing the User ID
        subscriptionType:
          type: string
          description: Type of subscription (e.g. monthly, yearly)

    Transaction:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the transaction
        userId:
          type: integer
          description: Foreign key referencing the User ID
        amount:
          type: number
          description: Amount of the transaction
        timestamp:
          type: string
          format: date-time
          description: Timestamp of the transaction

securitySchemes:
  bearerAuth:
    type: http
    scheme: bearer
    bearerFormat: JWT

security:
  - bearerAuth: []

roles:
  administrator:
    description: Administrator role
    permissions:
      - GET /users
      - POST /users
      - GET /users/{userId}
      - PUT /users/{userId}
      - GET /subscriptions
      - POST /subscriptions
      - GET /subscriptions/{subscriptionId}
      - PUT /subscriptions/{subscriptionId}
      - GET /transactions
      - POST /transactions

  user:
    description: User role
    permissions:
      - GET /users/{userId}
      - PUT /users/{userId}
      - GET /subscriptions/{subscriptionId}
      - PUT /subscriptions/{subscriptionId}
      - GET /transactions

  manager:
    description: Manager role
    permissions:
      - GET /users
      - POST /users
      - GET /users/{userId}
      - PUT /users/{userId}
      - GET /subscriptions
      - POST /subscriptions
      - GET /subscriptions/{subscriptionId}
      - PUT /subscriptions/{subscriptionId}
      - GET /transactions
      - POST /transactions